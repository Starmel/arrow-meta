proofs.kotlin=Kotlin
proofs.arrow=Λrrow
proofs.coercion=Coercion
proofs.type.proofs=Type Proofs
proofs.coercions.inspection.explicit.args.static.description=Hacer coercion explícita para argumentos
proofs.coercions.inspection.explicit.property.static.description=Hacer coercion explícita para propiedades
proofs.coercions.inspection.explicit.property.inspection.text=No se usa en este momento porque el tipo de resalto usado es ProblemHighlightType.INFORMATION
proofs.coercions.inspection.explicit.property.inspection.tool.description=<html><body>This inspection help us making the property coercions to be explicit</body></html>
proofs.coercions.inspection.implicit.static.description=Hacer coerción implícita
proofs.coercions.inspection.implicit.inspection.text=Expresión: ''{0}'' puede ser reemplazada por sólo su recibidor porque hay una ''{1}''
proofs.markers.proof.not.found=Prueba no encontrada
proofs.markers.coercion.message=<h2>Coercion</h2><p>Coercion pasando por la prueba:</p><p><code lang="kotlin">''{0}''</code> is not a subtype of <code lang="kotlin">''{1}''</code>.. but there is a proof to go from: <code lang="kotlin">''{0}''</code> to <code lang="kotlin">''{1}''</code> :</p><p>Link to proof declaration: <code lang="kotlin">''{2}''</code></p>
inspection.static.description.no.description.provided=No se ha proveído de una descripción para la inspección